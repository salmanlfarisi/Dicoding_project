{"version":3,"file":"./sw.bundle.js","mappings":";qBAOA,IAAIA,EAAW,SAAUC,GACvB,aAEA,IAGIC,EAHAC,EAAKC,OAAOC,UACZC,EAASH,EAAGI,eACZC,EAAiBJ,OAAOI,gBAAkB,SAAUC,EAAKC,EAAKC,GAAQF,EAAIC,GAAOC,EAAKC,KAAO,EAE7FC,EAA4B,mBAAXC,OAAwBA,OAAS,CAAC,EACnDC,EAAiBF,EAAQG,UAAY,aACrCC,EAAsBJ,EAAQK,eAAiB,kBAC/CC,EAAoBN,EAAQO,aAAe,gBAE/C,SAASC,EAAOZ,EAAKC,EAAKE,GAOxB,OANAR,OAAOI,eAAeC,EAAKC,EAAK,CAC9BE,MAAOA,EACPU,YAAY,EACZC,cAAc,EACdC,UAAU,IAELf,EAAIC,EACb,CACA,IAEEW,EAAO,CAAC,EAAG,GACb,CAAE,MAAOI,GACPJ,EAAS,SAASZ,EAAKC,EAAKE,GAC1B,OAAOH,EAAIC,GAAOE,CACpB,CACF,CAEA,SAASc,EAAKC,EAASC,EAASC,EAAMC,GAEpC,IAAIC,EAAiBH,GAAWA,EAAQvB,qBAAqB2B,EAAYJ,EAAUI,EAC/EC,EAAY7B,OAAO8B,OAAOH,EAAe1B,WACzC8B,EAAU,IAAIC,EAAQN,GAAe,IAMzC,OAFAtB,EAAeyB,EAAW,UAAW,CAAErB,MAAOyB,EAAiBV,EAASE,EAAMM,KAEvEF,CACT,CAaA,SAASK,EAASC,EAAI9B,EAAK+B,GACzB,IACE,MAAO,CAAEC,KAAM,SAAUD,IAAKD,EAAGG,KAAKjC,EAAK+B,GAC7C,CAAE,MAAOf,GACP,MAAO,CAAEgB,KAAM,QAASD,IAAKf,EAC/B,CACF,CAlBAxB,EAAQyB,KAAOA,EAoBf,IAAIiB,EAAyB,iBACzBC,EAAyB,iBACzBC,EAAoB,YACpBC,EAAoB,YAIpBC,EAAmB,CAAC,EAMxB,SAASf,IAAa,CACtB,SAASgB,IAAqB,CAC9B,SAASC,IAA8B,CAIvC,IAAIC,EAAoB,CAAC,EACzB7B,EAAO6B,EAAmBnC,GAAgB,WACxC,OAAOoC,IACT,IAEA,IAAIC,EAAWhD,OAAOiD,eAClBC,EAA0BF,GAAYA,EAASA,EAASG,EAAO,MAC/DD,GACAA,IAA4BnD,GAC5BG,EAAOoC,KAAKY,EAAyBvC,KAGvCmC,EAAoBI,GAGtB,IAAIE,EAAKP,EAA2B5C,UAClC2B,EAAU3B,UAAYD,OAAO8B,OAAOgB,GAgBtC,SAASO,EAAsBpD,GAC7B,CAAC,OAAQ,QAAS,UAAUqD,SAAQ,SAASC,GAC3CtC,EAAOhB,EAAWsD,GAAQ,SAASnB,GACjC,OAAOW,KAAKS,QAAQD,EAAQnB,EAC9B,GACF,GACF,CA+BA,SAASqB,EAAc5B,EAAW6B,GAChC,SAASC,EAAOJ,EAAQnB,EAAKwB,EAASC,GACpC,IAAIC,EAAS5B,EAASL,EAAU0B,GAAS1B,EAAWO,GACpD,GAAoB,UAAhB0B,EAAOzB,KAEJ,CACL,IAAI0B,EAASD,EAAO1B,IAChB5B,EAAQuD,EAAOvD,MACnB,OAAIA,GACiB,iBAAVA,GACPN,EAAOoC,KAAK9B,EAAO,WACdkD,EAAYE,QAAQpD,EAAMwD,SAASC,MAAK,SAASzD,GACtDmD,EAAO,OAAQnD,EAAOoD,EAASC,EACjC,IAAG,SAASxC,GACVsC,EAAO,QAAStC,EAAKuC,EAASC,EAChC,IAGKH,EAAYE,QAAQpD,GAAOyD,MAAK,SAASC,GAI9CH,EAAOvD,MAAQ0D,EACfN,EAAQG,EACV,IAAG,SAASI,GAGV,OAAOR,EAAO,QAASQ,EAAOP,EAASC,EACzC,GACF,CAzBEA,EAAOC,EAAO1B,IA0BlB,CAEA,IAAIgC,EAgCJhE,EAAe2C,KAAM,UAAW,CAAEvC,MA9BlC,SAAiB+C,EAAQnB,GACvB,SAASiC,IACP,OAAO,IAAIX,GAAY,SAASE,EAASC,GACvCF,EAAOJ,EAAQnB,EAAKwB,EAASC,EAC/B,GACF,CAEA,OAAOO,EAaLA,EAAkBA,EAAgBH,KAChCI,EAGAA,GACEA,GACR,GAKF,CA0BA,SAASpC,EAAiBV,EAASE,EAAMM,GACvC,IAAIuC,EAAQ/B,EAEZ,OAAO,SAAgBgB,EAAQnB,GAC7B,GAAIkC,IAAU7B,EACZ,MAAM,IAAI8B,MAAM,gCAGlB,GAAID,IAAU5B,EAAmB,CAC/B,GAAe,UAAXa,EACF,MAAMnB,EAMR,MAqQG,CAAE5B,MAAOV,EAAW0E,MAAM,EApQ/B,CAKA,IAHAzC,EAAQwB,OAASA,EACjBxB,EAAQK,IAAMA,IAED,CACX,IAAIqC,EAAW1C,EAAQ0C,SACvB,GAAIA,EAAU,CACZ,IAAIC,EAAiBC,EAAoBF,EAAU1C,GACnD,GAAI2C,EAAgB,CAClB,GAAIA,IAAmB/B,EAAkB,SACzC,OAAO+B,CACT,CACF,CAEA,GAAuB,SAAnB3C,EAAQwB,OAGVxB,EAAQ6C,KAAO7C,EAAQ8C,MAAQ9C,EAAQK,SAElC,GAAuB,UAAnBL,EAAQwB,OAAoB,CACrC,GAAIe,IAAU/B,EAEZ,MADA+B,EAAQ5B,EACFX,EAAQK,IAGhBL,EAAQ+C,kBAAkB/C,EAAQK,IAEpC,KAA8B,WAAnBL,EAAQwB,QACjBxB,EAAQgD,OAAO,SAAUhD,EAAQK,KAGnCkC,EAAQ7B,EAER,IAAIqB,EAAS5B,EAASX,EAASE,EAAMM,GACrC,GAAoB,WAAhB+B,EAAOzB,KAAmB,CAO5B,GAJAiC,EAAQvC,EAAQyC,KACZ9B,EACAF,EAEAsB,EAAO1B,MAAQO,EACjB,SAGF,MAAO,CACLnC,MAAOsD,EAAO1B,IACdoC,KAAMzC,EAAQyC,KAGlB,CAA2B,UAAhBV,EAAOzB,OAChBiC,EAAQ5B,EAGRX,EAAQwB,OAAS,QACjBxB,EAAQK,IAAM0B,EAAO1B,IAEzB,CACF,CACF,CAMA,SAASuC,EAAoBF,EAAU1C,GACrC,IAAIiD,EAAajD,EAAQwB,OACrBA,EAASkB,EAAS7D,SAASoE,GAC/B,GAAIzB,IAAWzD,EAOb,OAHAiC,EAAQ0C,SAAW,KAGA,UAAfO,GAA0BP,EAAS7D,SAAiB,SAGtDmB,EAAQwB,OAAS,SACjBxB,EAAQK,IAAMtC,EACd6E,EAAoBF,EAAU1C,GAEP,UAAnBA,EAAQwB,SAMK,WAAfyB,IACFjD,EAAQwB,OAAS,QACjBxB,EAAQK,IAAM,IAAI6C,UAChB,oCAAsCD,EAAa,aAN5CrC,EAYb,IAAImB,EAAS5B,EAASqB,EAAQkB,EAAS7D,SAAUmB,EAAQK,KAEzD,GAAoB,UAAhB0B,EAAOzB,KAIT,OAHAN,EAAQwB,OAAS,QACjBxB,EAAQK,IAAM0B,EAAO1B,IACrBL,EAAQ0C,SAAW,KACZ9B,EAGT,IAAIuC,EAAOpB,EAAO1B,IAElB,OAAM8C,EAOFA,EAAKV,MAGPzC,EAAQ0C,EAASU,YAAcD,EAAK1E,MAGpCuB,EAAQqD,KAAOX,EAASY,QAQD,WAAnBtD,EAAQwB,SACVxB,EAAQwB,OAAS,OACjBxB,EAAQK,IAAMtC,GAUlBiC,EAAQ0C,SAAW,KACZ9B,GANEuC,GA3BPnD,EAAQwB,OAAS,QACjBxB,EAAQK,IAAM,IAAI6C,UAAU,oCAC5BlD,EAAQ0C,SAAW,KACZ9B,EA+BX,CAqBA,SAAS2C,EAAaC,GACpB,IAAIC,EAAQ,CAAEC,OAAQF,EAAK,IAEvB,KAAKA,IACPC,EAAME,SAAWH,EAAK,IAGpB,KAAKA,IACPC,EAAMG,WAAaJ,EAAK,GACxBC,EAAMI,SAAWL,EAAK,IAGxBxC,KAAK8C,WAAWC,KAAKN,EACvB,CAEA,SAASO,EAAcP,GACrB,IAAI1B,EAAS0B,EAAMQ,YAAc,CAAC,EAClClC,EAAOzB,KAAO,gBACPyB,EAAO1B,IACdoD,EAAMQ,WAAalC,CACrB,CAEA,SAAS9B,EAAQN,GAIfqB,KAAK8C,WAAa,CAAC,CAAEJ,OAAQ,SAC7B/D,EAAY4B,QAAQgC,EAAcvC,MAClCA,KAAKkD,OAAM,EACb,CA8BA,SAAS9C,EAAO+C,GACd,GAAgB,MAAZA,EAAkB,CACpB,IAAIC,EAAiBD,EAASvF,GAC9B,GAAIwF,EACF,OAAOA,EAAe7D,KAAK4D,GAG7B,GAA6B,mBAAlBA,EAASd,KAClB,OAAOc,EAGT,IAAKE,MAAMF,EAASG,QAAS,CAC3B,IAAIC,GAAK,EAAGlB,EAAO,SAASA,IAC1B,OAASkB,EAAIJ,EAASG,QACpB,GAAInG,EAAOoC,KAAK4D,EAAUI,GAGxB,OAFAlB,EAAK5E,MAAQ0F,EAASI,GACtBlB,EAAKZ,MAAO,EACLY,EAOX,OAHAA,EAAK5E,MAAQV,EACbsF,EAAKZ,MAAO,EAELY,CACT,EAEA,OAAOA,EAAKA,KAAOA,CACrB,CACF,CAEA,MAAM,IAAIH,iBAAiBiB,EAAW,mBACxC,CAmNA,OAnnBAtD,EAAkB3C,UAAY4C,EAC9BzC,EAAegD,EAAI,cAAe,CAAE5C,MAAOqC,EAA4B1B,cAAc,IACrFf,EACEyC,EACA,cACA,CAAErC,MAAOoC,EAAmBzB,cAAc,IAE5CyB,EAAkB2D,YAActF,EAC9B4B,EACA9B,EACA,qBAaFlB,EAAQ2G,oBAAsB,SAASC,GACrC,IAAIC,EAAyB,mBAAXD,GAAyBA,EAAOE,YAClD,QAAOD,IACHA,IAAS9D,GAG2B,uBAAnC8D,EAAKH,aAAeG,EAAKE,MAEhC,EAEA/G,EAAQgH,KAAO,SAASJ,GAQtB,OAPIzG,OAAO8G,eACT9G,OAAO8G,eAAeL,EAAQ5D,IAE9B4D,EAAOM,UAAYlE,EACnB5B,EAAOwF,EAAQ1F,EAAmB,sBAEpC0F,EAAOxG,UAAYD,OAAO8B,OAAOsB,GAC1BqD,CACT,EAMA5G,EAAQmH,MAAQ,SAAS5E,GACvB,MAAO,CAAE4B,QAAS5B,EACpB,EAqEAiB,EAAsBI,EAAcxD,WACpCgB,EAAOwC,EAAcxD,UAAWY,GAAqB,WACnD,OAAOkC,IACT,IACAlD,EAAQ4D,cAAgBA,EAKxB5D,EAAQoH,MAAQ,SAAS1F,EAASC,EAASC,EAAMC,EAAagC,QACxC,IAAhBA,IAAwBA,EAAcwD,SAE1C,IAAIC,EAAO,IAAI1D,EACbnC,EAAKC,EAASC,EAASC,EAAMC,GAC7BgC,GAGF,OAAO7D,EAAQ2G,oBAAoBhF,GAC/B2F,EACAA,EAAK/B,OAAOnB,MAAK,SAASF,GACxB,OAAOA,EAAOS,KAAOT,EAAOvD,MAAQ2G,EAAK/B,MAC3C,GACN,EAuKA/B,EAAsBD,GAEtBnC,EAAOmC,EAAIrC,EAAmB,aAO9BE,EAAOmC,EAAIzC,GAAgB,WACzB,OAAOoC,IACT,IAEA9B,EAAOmC,EAAI,YAAY,WACrB,MAAO,oBACT,IAiCAvD,EAAQuH,KAAO,SAASC,GACtB,IAAIC,EAAStH,OAAOqH,GAChBD,EAAO,GACX,IAAK,IAAI9G,KAAOgH,EACdF,EAAKtB,KAAKxF,GAMZ,OAJA8G,EAAKG,UAIE,SAASnC,IACd,KAAOgC,EAAKf,QAAQ,CAClB,IAAI/F,EAAM8G,EAAKI,MACf,GAAIlH,KAAOgH,EAGT,OAFAlC,EAAK5E,MAAQF,EACb8E,EAAKZ,MAAO,EACLY,CAEX,CAMA,OADAA,EAAKZ,MAAO,EACLY,CACT,CACF,EAmCAvF,EAAQsD,OAASA,EAMjBnB,EAAQ/B,UAAY,CAClB0G,YAAa3E,EAEbiE,MAAO,SAASwB,GAcd,GAbA1E,KAAK2E,KAAO,EACZ3E,KAAKqC,KAAO,EAGZrC,KAAK6B,KAAO7B,KAAK8B,MAAQ/E,EACzBiD,KAAKyB,MAAO,EACZzB,KAAK0B,SAAW,KAEhB1B,KAAKQ,OAAS,OACdR,KAAKX,IAAMtC,EAEXiD,KAAK8C,WAAWvC,QAAQyC,IAEnB0B,EACH,IAAK,IAAIb,KAAQ7D,KAEQ,MAAnB6D,EAAKe,OAAO,IACZzH,EAAOoC,KAAKS,KAAM6D,KACjBR,OAAOQ,EAAKgB,MAAM,MACrB7E,KAAK6D,GAAQ9G,EAIrB,EAEA+H,KAAM,WACJ9E,KAAKyB,MAAO,EAEZ,IACIsD,EADY/E,KAAK8C,WAAW,GACLG,WAC3B,GAAwB,UAApB8B,EAAWzF,KACb,MAAMyF,EAAW1F,IAGnB,OAAOW,KAAKgF,IACd,EAEAjD,kBAAmB,SAASkD,GAC1B,GAAIjF,KAAKyB,KACP,MAAMwD,EAGR,IAAIjG,EAAUgB,KACd,SAASkF,EAAOC,EAAKC,GAYnB,OAXArE,EAAOzB,KAAO,QACdyB,EAAO1B,IAAM4F,EACbjG,EAAQqD,KAAO8C,EAEXC,IAGFpG,EAAQwB,OAAS,OACjBxB,EAAQK,IAAMtC,KAGNqI,CACZ,CAEA,IAAK,IAAI7B,EAAIvD,KAAK8C,WAAWQ,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACpD,IAAId,EAAQzC,KAAK8C,WAAWS,GACxBxC,EAAS0B,EAAMQ,WAEnB,GAAqB,SAAjBR,EAAMC,OAIR,OAAOwC,EAAO,OAGhB,GAAIzC,EAAMC,QAAU1C,KAAK2E,KAAM,CAC7B,IAAIU,EAAWlI,EAAOoC,KAAKkD,EAAO,YAC9B6C,EAAanI,EAAOoC,KAAKkD,EAAO,cAEpC,GAAI4C,GAAYC,EAAY,CAC1B,GAAItF,KAAK2E,KAAOlC,EAAME,SACpB,OAAOuC,EAAOzC,EAAME,UAAU,GACzB,GAAI3C,KAAK2E,KAAOlC,EAAMG,WAC3B,OAAOsC,EAAOzC,EAAMG,WAGxB,MAAO,GAAIyC,GACT,GAAIrF,KAAK2E,KAAOlC,EAAME,SACpB,OAAOuC,EAAOzC,EAAME,UAAU,OAG3B,KAAI2C,EAMT,MAAM,IAAI9D,MAAM,0CALhB,GAAIxB,KAAK2E,KAAOlC,EAAMG,WACpB,OAAOsC,EAAOzC,EAAMG,WAKxB,CACF,CACF,CACF,EAEAZ,OAAQ,SAAS1C,EAAMD,GACrB,IAAK,IAAIkE,EAAIvD,KAAK8C,WAAWQ,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACpD,IAAId,EAAQzC,KAAK8C,WAAWS,GAC5B,GAAId,EAAMC,QAAU1C,KAAK2E,MACrBxH,EAAOoC,KAAKkD,EAAO,eACnBzC,KAAK2E,KAAOlC,EAAMG,WAAY,CAChC,IAAI2C,EAAe9C,EACnB,KACF,CACF,CAEI8C,IACU,UAATjG,GACS,aAATA,IACDiG,EAAa7C,QAAUrD,GACvBA,GAAOkG,EAAa3C,aAGtB2C,EAAe,MAGjB,IAAIxE,EAASwE,EAAeA,EAAatC,WAAa,CAAC,EAIvD,OAHAlC,EAAOzB,KAAOA,EACdyB,EAAO1B,IAAMA,EAETkG,GACFvF,KAAKQ,OAAS,OACdR,KAAKqC,KAAOkD,EAAa3C,WAClBhD,GAGFI,KAAKwF,SAASzE,EACvB,EAEAyE,SAAU,SAASzE,EAAQ8B,GACzB,GAAoB,UAAhB9B,EAAOzB,KACT,MAAMyB,EAAO1B,IAcf,MAXoB,UAAhB0B,EAAOzB,MACS,aAAhByB,EAAOzB,KACTU,KAAKqC,KAAOtB,EAAO1B,IACM,WAAhB0B,EAAOzB,MAChBU,KAAKgF,KAAOhF,KAAKX,IAAM0B,EAAO1B,IAC9BW,KAAKQ,OAAS,SACdR,KAAKqC,KAAO,OACa,WAAhBtB,EAAOzB,MAAqBuD,IACrC7C,KAAKqC,KAAOQ,GAGPjD,CACT,EAEA6F,OAAQ,SAAS7C,GACf,IAAK,IAAIW,EAAIvD,KAAK8C,WAAWQ,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACpD,IAAId,EAAQzC,KAAK8C,WAAWS,GAC5B,GAAId,EAAMG,aAAeA,EAGvB,OAFA5C,KAAKwF,SAAS/C,EAAMQ,WAAYR,EAAMI,UACtCG,EAAcP,GACP7C,CAEX,CACF,EAEA,MAAS,SAAS8C,GAChB,IAAK,IAAIa,EAAIvD,KAAK8C,WAAWQ,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACpD,IAAId,EAAQzC,KAAK8C,WAAWS,GAC5B,GAAId,EAAMC,SAAWA,EAAQ,CAC3B,IAAI3B,EAAS0B,EAAMQ,WACnB,GAAoB,UAAhBlC,EAAOzB,KAAkB,CAC3B,IAAIoG,EAAS3E,EAAO1B,IACpB2D,EAAcP,EAChB,CACA,OAAOiD,CACT,CACF,CAIA,MAAM,IAAIlE,MAAM,wBAClB,EAEAmE,cAAe,SAASxC,EAAUf,EAAYE,GAa5C,OAZAtC,KAAK0B,SAAW,CACd7D,SAAUuC,EAAO+C,GACjBf,WAAYA,EACZE,QAASA,GAGS,SAAhBtC,KAAKQ,SAGPR,KAAKX,IAAMtC,GAGN6C,CACT,GAOK9C,CAET,CAvtBc,CA4tBiB8I,EAAO9I,SAGtC,IACE+I,mBAAqBhJ,CACvB,CAAE,MAAOiJ,GAWmB,iBAAfC,WACTA,WAAWF,mBAAqBhJ,EAEhCmJ,SAAS,IAAK,yBAAdA,CAAwCnJ,EAE5C,yBCtvBA,IACI6B,KAAK,uBAAyBuH,GAClC,CACA,MAAOC,GAAK,yBCHZ,IACIxH,KAAK,6BAA+BuH,GACxC,CACA,MAAOC,GAAK,yBCHZ,IACIxH,KAAK,0BAA4BuH,GACrC,CACA,MAAOC,GAAK,yBCHZ,IACIxH,KAAK,6BAA+BuH,GACxC,CACA,MAAOC,GAAK,ICJRC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBtJ,IAAjBuJ,EACH,OAAOA,EAAaxJ,QAGrB,IAAI8I,EAASO,EAAyBE,GAAY,CAGjDvJ,QAAS,CAAC,GAOX,OAHAyJ,EAAoBF,GAAUT,EAAQA,EAAO9I,QAASsJ,GAG/CR,EAAO9I,OACf,2BCVA,QANc,uQCLd0J,EAAA,kBAAAN,CAAA,MAAAO,EAAAP,EAAA,GAAAQ,EAAAzJ,OAAAC,UAAAyJ,EAAAD,EAAAtJ,eAAAwJ,EAAA3J,OAAAI,gBAAA,SAAAoJ,EAAAP,EAAAQ,GAAAD,EAAAP,GAAAQ,EAAAjJ,KAAA,EAAA8F,EAAA,mBAAA5F,OAAAA,OAAA,GAAAkJ,EAAAtD,EAAA1F,UAAA,aAAAiJ,EAAAvD,EAAAxF,eAAA,kBAAAgJ,EAAAxD,EAAAtF,aAAA,yBAAAC,EAAAuI,EAAAP,EAAAQ,GAAA,OAAAzJ,OAAAI,eAAAoJ,EAAAP,EAAA,CAAAzI,MAAAiJ,EAAAvI,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAoI,EAAAP,EAAA,KAAAhI,EAAA,aAAAuI,GAAAvI,EAAA,SAAAuI,EAAAP,EAAAQ,GAAA,OAAAD,EAAAP,GAAAQ,CAAA,WAAAnI,EAAAkI,EAAAP,EAAAQ,EAAAC,GAAA,IAAApD,EAAA2C,GAAAA,EAAAhJ,qBAAA2B,EAAAqH,EAAArH,EAAAgI,EAAA5J,OAAA8B,OAAAwE,EAAArG,WAAA4J,EAAA,IAAA7H,EAAA0H,GAAA,WAAAC,EAAAC,EAAA,WAAApJ,MAAAyB,EAAAuH,EAAAC,EAAAI,KAAAD,CAAA,UAAA1H,EAAAsH,EAAAP,EAAAQ,GAAA,WAAApH,KAAA,SAAAD,IAAAoH,EAAAlH,KAAA2G,EAAAQ,GAAA,OAAAD,GAAA,OAAAnH,KAAA,QAAAD,IAAAoH,EAAA,EAAAP,EAAA3H,KAAAA,EAAA,IAAAyI,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAvI,IAAA,UAAAgB,IAAA,UAAAC,IAAA,KAAAuH,EAAA,GAAAnJ,EAAAmJ,EAAAR,GAAA,8BAAAS,EAAArK,OAAAiD,eAAAqH,EAAAD,GAAAA,EAAAA,EAAAlH,EAAA,MAAAmH,GAAAA,IAAAb,GAAAC,EAAApH,KAAAgI,EAAAV,KAAAQ,EAAAE,GAAA,IAAAC,EAAA1H,EAAA5C,UAAA2B,EAAA3B,UAAAD,OAAA8B,OAAAsI,GAAA,SAAA/G,EAAAmG,GAAA,0BAAAlG,SAAA,SAAA2F,GAAAhI,EAAAuI,EAAAP,GAAA,SAAAO,GAAA,YAAAhG,QAAAyF,EAAAO,EAAA,gBAAA/F,EAAA+F,EAAAP,GAAA,SAAAtF,EAAA8F,EAAAE,EAAArD,EAAAsD,GAAA,IAAAC,EAAA3H,EAAAsH,EAAAC,GAAAD,EAAAG,GAAA,aAAAE,EAAAxH,KAAA,KAAAyH,EAAAD,EAAAzH,IAAA2H,EAAAD,EAAAtJ,MAAA,OAAAuJ,GAAA,UAAAS,EAAAT,IAAAL,EAAApH,KAAAyH,EAAA,WAAAd,EAAArF,QAAAmG,EAAA/F,SAAAC,MAAA,SAAAuF,GAAA7F,EAAA,OAAA6F,EAAAlD,EAAAsD,EAAA,aAAAJ,GAAA7F,EAAA,QAAA6F,EAAAlD,EAAAsD,EAAA,IAAAX,EAAArF,QAAAmG,GAAA9F,MAAA,SAAAuF,GAAAM,EAAAtJ,MAAAgJ,EAAAlD,EAAAwD,EAAA,aAAAN,GAAA,OAAA7F,EAAA,QAAA6F,EAAAlD,EAAAsD,EAAA,IAAAA,EAAAC,EAAAzH,IAAA,KAAAqH,EAAAE,EAAA,gBAAAnJ,MAAA,SAAAgJ,EAAAE,GAAA,SAAArF,IAAA,WAAA4E,GAAA,SAAAA,EAAAQ,GAAA9F,EAAA6F,EAAAE,EAAAT,EAAAQ,EAAA,WAAAA,EAAAA,EAAAA,EAAAxF,KAAAI,EAAAA,GAAAA,GAAA,aAAApC,EAAAgH,EAAAQ,EAAAC,GAAA,IAAAC,EAAAI,EAAA,gBAAAzD,EAAAsD,GAAA,GAAAD,IAAAM,EAAA,MAAA1F,MAAA,mCAAAoF,IAAAO,EAAA,cAAA5D,EAAA,MAAAsD,EAAA,OAAApJ,MAAAgJ,EAAAhF,MAAA,OAAAkF,EAAAnG,OAAA+C,EAAAoD,EAAAtH,IAAAwH,IAAA,KAAAC,EAAAH,EAAAjF,SAAA,GAAAoF,EAAA,KAAAC,EAAAnF,EAAAkF,EAAAH,GAAA,GAAAI,EAAA,IAAAA,IAAAK,EAAA,gBAAAL,CAAA,cAAAJ,EAAAnG,OAAAmG,EAAA9E,KAAA8E,EAAA7E,MAAA6E,EAAAtH,SAAA,aAAAsH,EAAAnG,OAAA,IAAAoG,IAAAI,EAAA,MAAAJ,EAAAO,EAAAR,EAAAtH,IAAAsH,EAAA5E,kBAAA4E,EAAAtH,IAAA,gBAAAsH,EAAAnG,QAAAmG,EAAA3E,OAAA,SAAA2E,EAAAtH,KAAAuH,EAAAM,EAAA,IAAAG,EAAAlI,EAAA+G,EAAAQ,EAAAC,GAAA,cAAAU,EAAA/H,KAAA,IAAAsH,EAAAD,EAAAlF,KAAA0F,EAAAF,EAAAI,EAAAhI,MAAA+H,EAAA,gBAAA3J,MAAA4J,EAAAhI,IAAAoC,KAAAkF,EAAAlF,KAAA,WAAA4F,EAAA/H,OAAAsH,EAAAO,EAAAR,EAAAnG,OAAA,QAAAmG,EAAAtH,IAAAgI,EAAAhI,IAAA,YAAAuC,EAAAsE,EAAAQ,GAAA,IAAAC,EAAAD,EAAAlG,OAAAoG,EAAAV,EAAArI,SAAA8I,GAAA,GAAAC,IAAAH,EAAA,OAAAC,EAAAhF,SAAA,eAAAiF,GAAAT,EAAArI,SAAA,SAAA6I,EAAAlG,OAAA,SAAAkG,EAAArH,IAAAoH,EAAA7E,EAAAsE,EAAAQ,GAAA,UAAAA,EAAAlG,SAAA,WAAAmG,IAAAD,EAAAlG,OAAA,QAAAkG,EAAArH,IAAA,IAAA6C,UAAA,oCAAAyE,EAAA,aAAAS,EAAA,IAAA7D,EAAApE,EAAAyH,EAAAV,EAAArI,SAAA6I,EAAArH,KAAA,aAAAkE,EAAAjE,KAAA,OAAAoH,EAAAlG,OAAA,QAAAkG,EAAArH,IAAAkE,EAAAlE,IAAAqH,EAAAhF,SAAA,KAAA0F,EAAA,IAAAP,EAAAtD,EAAAlE,IAAA,OAAAwH,EAAAA,EAAApF,MAAAiF,EAAAR,EAAA9D,YAAAyE,EAAApJ,MAAAiJ,EAAArE,KAAA6D,EAAA5D,QAAA,WAAAoE,EAAAlG,SAAAkG,EAAAlG,OAAA,OAAAkG,EAAArH,IAAAoH,GAAAC,EAAAhF,SAAA,KAAA0F,GAAAP,GAAAH,EAAAlG,OAAA,QAAAkG,EAAArH,IAAA,IAAA6C,UAAA,oCAAAwE,EAAAhF,SAAA,KAAA0F,EAAA,UAAA7E,EAAAkE,GAAA,IAAAP,EAAA,CAAAxD,OAAA+D,EAAA,SAAAA,IAAAP,EAAAvD,SAAA8D,EAAA,SAAAA,IAAAP,EAAAtD,WAAA6D,EAAA,GAAAP,EAAArD,SAAA4D,EAAA,SAAA3D,WAAAC,KAAAmD,EAAA,UAAAlD,EAAAyD,GAAA,IAAAP,EAAAO,EAAAxD,YAAA,GAAAiD,EAAA5G,KAAA,gBAAA4G,EAAA7G,IAAAoH,EAAAxD,WAAAiD,CAAA,UAAAjH,EAAAwH,GAAA,KAAA3D,WAAA,EAAAJ,OAAA,SAAA+D,EAAAlG,QAAAgC,EAAA,WAAAW,OAAA,YAAA9C,EAAA8F,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAQ,EAAAR,EAAAW,GAAA,GAAAH,EAAA,OAAAA,EAAAnH,KAAA2G,GAAA,sBAAAA,EAAA7D,KAAA,OAAA6D,EAAA,IAAA7C,MAAA6C,EAAA5C,QAAA,KAAAsD,GAAA,EAAArD,EAAA,SAAAlB,IAAA,OAAAuE,EAAAV,EAAA5C,QAAA,GAAAqD,EAAApH,KAAA2G,EAAAU,GAAA,OAAAvE,EAAA5E,MAAAyI,EAAAU,GAAAvE,EAAAZ,MAAA,EAAAY,EAAA,OAAAA,EAAA5E,MAAAgJ,EAAApE,EAAAZ,MAAA,EAAAY,CAAA,SAAAkB,EAAAlB,KAAAkB,CAAA,YAAArB,UAAAuF,EAAAvB,GAAA,2BAAArG,EAAA3C,UAAA4C,EAAA8G,EAAAY,EAAA,eAAA/J,MAAAqC,EAAA1B,cAAA,IAAAwI,EAAA9G,EAAA,eAAArC,MAAAoC,EAAAzB,cAAA,IAAAyB,EAAA2D,YAAAtF,EAAA4B,EAAAiH,EAAA,qBAAAb,EAAAzC,oBAAA,SAAAgD,GAAA,IAAAP,EAAA,mBAAAO,GAAAA,EAAA7C,YAAA,QAAAsC,IAAAA,IAAArG,GAAA,uBAAAqG,EAAA1C,aAAA0C,EAAArC,MAAA,EAAAqC,EAAApC,KAAA,SAAA2C,GAAA,OAAAxJ,OAAA8G,eAAA9G,OAAA8G,eAAA0C,EAAA3G,IAAA2G,EAAAzC,UAAAlE,EAAA5B,EAAAuI,EAAAM,EAAA,sBAAAN,EAAAvJ,UAAAD,OAAA8B,OAAAyI,GAAAf,CAAA,EAAAP,EAAAjC,MAAA,SAAAwC,GAAA,OAAAxF,QAAAwF,EAAA,EAAAnG,EAAAI,EAAAxD,WAAAgB,EAAAwC,EAAAxD,UAAA4J,GAAA,0BAAAZ,EAAAxF,cAAAA,EAAAwF,EAAAhC,MAAA,SAAAuC,EAAAC,EAAAC,EAAAC,EAAArD,QAAA,IAAAA,IAAAA,EAAAY,SAAA,IAAA0C,EAAA,IAAAnG,EAAAnC,EAAAkI,EAAAC,EAAAC,EAAAC,GAAArD,GAAA,OAAA2C,EAAAzC,oBAAAiD,GAAAG,EAAAA,EAAAxE,OAAAnB,MAAA,SAAAuF,GAAA,OAAAA,EAAAhF,KAAAgF,EAAAhJ,MAAAoJ,EAAAxE,MAAA,KAAA/B,EAAAkH,GAAAtJ,EAAAsJ,EAAAT,EAAA,aAAA7I,EAAAsJ,EAAAX,GAAA,0BAAA3I,EAAAsJ,EAAA,qDAAAtB,EAAA7B,KAAA,SAAAoC,GAAA,IAAAP,EAAAjJ,OAAAwJ,GAAAC,EAAA,WAAAC,KAAAT,EAAAQ,EAAA3D,KAAA4D,GAAA,OAAAD,EAAAlC,UAAA,SAAAnC,IAAA,KAAAqE,EAAApD,QAAA,KAAAmD,EAAAC,EAAAjC,MAAA,GAAAgC,KAAAP,EAAA,OAAA7D,EAAA5E,MAAAgJ,EAAApE,EAAAZ,MAAA,EAAAY,CAAA,QAAAA,EAAAZ,MAAA,EAAAY,CAAA,GAAA6D,EAAA9F,OAAAA,EAAAnB,EAAA/B,UAAA,CAAA0G,YAAA3E,EAAAiE,MAAA,SAAAgD,GAAA,QAAAvB,KAAA,OAAAtC,KAAA,OAAAR,KAAA,KAAAC,MAAA2E,EAAA,KAAAhF,MAAA,OAAAC,SAAA,UAAAlB,OAAA,YAAAnB,IAAAoH,EAAA,KAAA3D,WAAAvC,QAAAyC,IAAAkD,EAAA,QAAAQ,KAAA,WAAAA,EAAA9B,OAAA,IAAA+B,EAAApH,KAAA,KAAAmH,KAAArD,OAAAqD,EAAA7B,MAAA,WAAA6B,GAAAD,EAAA,EAAA3B,KAAA,gBAAArD,MAAA,MAAAgF,EAAA,KAAA3D,WAAA,GAAAG,WAAA,aAAAwD,EAAAnH,KAAA,MAAAmH,EAAApH,IAAA,YAAA2F,IAAA,EAAAjD,kBAAA,SAAAmE,GAAA,QAAAzE,KAAA,MAAAyE,EAAA,IAAAQ,EAAA,cAAAxB,EAAAyB,EAAAC,GAAA,OAAAC,EAAAvH,KAAA,QAAAuH,EAAAxH,IAAA6G,EAAAQ,EAAArE,KAAAsE,EAAAC,IAAAF,EAAAlG,OAAA,OAAAkG,EAAArH,IAAAoH,KAAAG,CAAA,SAAAA,EAAA,KAAA9D,WAAAQ,OAAA,EAAAsD,GAAA,IAAAA,EAAA,KAAArD,EAAA,KAAAT,WAAA8D,GAAAC,EAAAtD,EAAAN,WAAA,YAAAM,EAAAb,OAAA,OAAAwC,EAAA,UAAA3B,EAAAb,QAAA,KAAAiC,KAAA,KAAAmC,EAAAH,EAAApH,KAAAgE,EAAA,YAAAwD,EAAAJ,EAAApH,KAAAgE,EAAA,iBAAAuD,GAAAC,EAAA,SAAApC,KAAApB,EAAAZ,SAAA,OAAAuC,EAAA3B,EAAAZ,UAAA,WAAAgC,KAAApB,EAAAX,WAAA,OAAAsC,EAAA3B,EAAAX,WAAA,SAAAkE,GAAA,QAAAnC,KAAApB,EAAAZ,SAAA,OAAAuC,EAAA3B,EAAAZ,UAAA,YAAAoE,EAAA,MAAAvF,MAAA,kDAAAmD,KAAApB,EAAAX,WAAA,OAAAsC,EAAA3B,EAAAX,WAAA,KAAAZ,OAAA,SAAAyE,EAAAP,GAAA,QAAAQ,EAAA,KAAA5D,WAAAQ,OAAA,EAAAoD,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAA9D,WAAA4D,GAAA,GAAAE,EAAAlE,QAAA,KAAAiC,MAAAgC,EAAApH,KAAAqH,EAAA,oBAAAjC,KAAAiC,EAAAhE,WAAA,KAAAW,EAAAqD,EAAA,OAAArD,IAAA,UAAAkD,GAAA,aAAAA,IAAAlD,EAAAb,QAAAwD,GAAAA,GAAA3C,EAAAX,aAAAW,EAAA,UAAAsD,EAAAtD,EAAAA,EAAAN,WAAA,UAAA4D,EAAAvH,KAAAmH,EAAAI,EAAAxH,IAAA6G,EAAA3C,GAAA,KAAA/C,OAAA,YAAA6B,KAAAkB,EAAAX,WAAAwE,GAAA,KAAA5B,SAAAqB,EAAA,EAAArB,SAAA,SAAAiB,EAAAP,GAAA,aAAAO,EAAAnH,KAAA,MAAAmH,EAAApH,IAAA,gBAAAoH,EAAAnH,MAAA,aAAAmH,EAAAnH,KAAA,KAAA+C,KAAAoE,EAAApH,IAAA,WAAAoH,EAAAnH,MAAA,KAAA0F,KAAA,KAAA3F,IAAAoH,EAAApH,IAAA,KAAAmB,OAAA,cAAA6B,KAAA,kBAAAoE,EAAAnH,MAAA4G,IAAA,KAAA7D,KAAA6D,GAAAkB,CAAA,EAAA3B,OAAA,SAAAgB,GAAA,QAAAP,EAAA,KAAApD,WAAAQ,OAAA,EAAA4C,GAAA,IAAAA,EAAA,KAAAQ,EAAA,KAAA5D,WAAAoD,GAAA,GAAAQ,EAAA9D,aAAA6D,EAAA,YAAAjB,SAAAkB,EAAAzD,WAAAyD,EAAA7D,UAAAG,EAAA0D,GAAAU,CAAA,kBAAAX,GAAA,QAAAP,EAAA,KAAApD,WAAAQ,OAAA,EAAA4C,GAAA,IAAAA,EAAA,KAAAQ,EAAA,KAAA5D,WAAAoD,GAAA,GAAAQ,EAAAhE,SAAA+D,EAAA,KAAAE,EAAAD,EAAAzD,WAAA,aAAA0D,EAAArH,KAAA,KAAAsH,EAAAD,EAAAtH,IAAA2D,EAAA0D,EAAA,QAAAE,CAAA,QAAApF,MAAA,0BAAAmE,cAAA,SAAAO,EAAAQ,EAAAC,GAAA,YAAAjF,SAAA,CAAA7D,SAAAuC,EAAA8F,GAAA9D,WAAAsE,EAAApE,QAAAqE,GAAA,cAAAnG,SAAA,KAAAnB,IAAAoH,GAAAW,CAAA,GAAAlB,CAAA,UAAAwB,EAAAf,EAAAF,EAAAP,EAAAQ,EAAAE,EAAAC,EAAAC,GAAA,QAAAvD,EAAAoD,EAAAE,GAAAC,GAAAC,EAAAxD,EAAA9F,KAAA,OAAAkJ,GAAA,YAAAT,EAAAS,EAAA,CAAApD,EAAA9B,KAAAgF,EAAAM,GAAA5C,QAAAtD,QAAAkG,GAAA7F,KAAAwF,EAAAE,EAAA,UAAAe,EAAAhB,GAAA,sBAAAF,EAAA,KAAAP,EAAA0B,UAAA,WAAAzD,SAAA,SAAAuC,EAAAE,GAAA,IAAAC,EAAAF,EAAAkB,MAAApB,EAAAP,GAAA,SAAA4B,EAAAnB,GAAAe,EAAAb,EAAAH,EAAAE,EAAAkB,EAAAC,EAAA,OAAApB,EAAA,UAAAoB,EAAApB,GAAAe,EAAAb,EAAAH,EAAAE,EAAAkB,EAAAC,EAAA,QAAApB,EAAA,CAAAmB,OAAA,OA6CA,QA5CoB,CACZE,gBAAe,SAACC,GAAU,IAAAC,EAAA,YAAAP,EAAAnB,IAAA1C,MAAA,SAAAqE,IAAA,OAAA3B,IAAAjI,MAAA,SAAA6J,GAAA,cAAAA,EAAAzD,KAAAyD,EAAA/F,MAAA,cAAA+F,EAAA/F,KAAA,EACV6F,EAAKG,aAAY,OAA1BD,EAAAvG,KACLyG,OAAOL,GAAU,wBAAAG,EAAAtD,OAAA,GAAAqD,EAAA,IAFOR,EAGhC,EAEMY,eAAc,WAAG,OAAAZ,EAAAnB,IAAA1C,MAAA,SAAA0E,IAAA,OAAAhC,IAAAjI,MAAA,SAAAkK,GAAA,cAAAA,EAAA9D,KAAA8D,EAAApG,MAAA,cAAAoG,EAAApG,KAAA,EACIqG,OAAOrE,OAAM,OAAtBoE,EAAA5G,KAEb8G,QAAO,SAAC9E,GAAI,OAAKA,IAAS+E,CAAiB,IAC3CC,KAAI,SAACC,GAAY,OAAKJ,OAAM,OAAQI,EAAa,IAAE,wBAAAL,EAAA3D,OAAA,GAAA0D,EAAA,IAJjCb,EAKvB,EAEMoB,gBAAe,SAACC,GAAS,IAAAC,EAAA,YAAAtB,EAAAnB,IAAA1C,MAAA,SAAAoF,IAAA,IAAAC,EAAA,OAAA3C,IAAAjI,MAAA,SAAA6K,GAAA,cAAAA,EAAAzE,KAAAyE,EAAA/G,MAAA,cAAA+G,EAAA/G,KAAA,EACNqG,OAAOW,MAAML,GAAQ,OAA9B,KAARG,EAAQC,EAAAvH,MAEA,CAAFuH,EAAA/G,KAAA,QACkB,OAA5B4G,EAAKK,cAAcN,GAASI,EAAApH,OAAA,SACrBmH,GAAQ,cAAAC,EAAApH,OAAA,SAEViH,EAAKK,cAAcN,IAAQ,wBAAAI,EAAAtE,OAAA,GAAAoE,EAAA,IAPLvB,EAQ/B,EAEMU,WAAU,WAAG,OAAAV,EAAAnB,IAAA1C,MAAA,SAAAyF,IAAA,OAAA/C,IAAAjI,MAAA,SAAAiL,GAAA,cAAAA,EAAA7E,KAAA6E,EAAAnH,MAAA,cAAAmH,EAAAxH,OAAA,SACV0G,OAAOe,KAAKb,IAAkB,wBAAAY,EAAA1E,OAAA,GAAAyE,EAAA,IADpB5B,EAEnB,EAEM2B,cAAa,SAACN,GAAS,IAAAU,EAAA,YAAA/B,EAAAnB,IAAA1C,MAAA,SAAA6F,IAAA,IAAAR,EAAA,OAAA3C,IAAAjI,MAAA,SAAAqL,GAAA,cAAAA,EAAAjF,KAAAiF,EAAAvH,MAAA,cAAAuH,EAAAvH,KAAA,EACJwH,MAAMb,GAAQ,OAAvB,IAARG,EAAQS,EAAA/H,OAEuB,MAApBsH,EAASW,OAAc,CAAAF,EAAAvH,KAAA,eAAAuH,EAAA5H,OAAA,SAC/BmH,GAAQ,cAAAS,EAAAvH,KAAA,EAGXqH,EAAKK,UAAUf,GAAQ,cAAAY,EAAA5H,OAAA,SACtBmH,GAAQ,wBAAAS,EAAA9E,OAAA,GAAA6E,EAAA,IARYhC,EAS7B,EAEMoC,UAAS,SAACf,GAAS,IAAAgB,EAAA,YAAArC,EAAAnB,IAAA1C,MAAA,SAAAmG,IAAA,OAAAzD,IAAAjI,MAAA,SAAA2L,GAAA,cAAAA,EAAAvF,KAAAuF,EAAA7H,MAAA,cAAA6H,EAAA7H,KAAA,EACH2H,EAAK3B,aAAY,OAA1B6B,EAAArI,KACLsI,IAAInB,GAAS,wBAAAkB,EAAApF,OAAA,GAAAmF,EAAA,IAFItC,EAGzB,UCzBF,MAAM,UAAqBnG,MASvB,WAAAoC,CAAYwG,EAAWC,GAEnBC,MCpBS,EAACC,KAASC,KACvB,IAAIC,EAAMF,EAIV,OAHIC,EAAKlH,OAAS,IACdmH,GAAO,OAAOC,KAAKC,UAAUH,MAE1BC,CAAG,EDcUG,CAAiBR,EAAWC,IAE5CrK,KAAK6D,KAAOuG,EACZpK,KAAKqK,QAAUA,CACnB,EEjBJ,MCPMQ,EAAoB,CACtBC,gBAAiB,kBACjBC,SAAU,cACVC,OAAQ,UACRnO,QAAS,UACToO,OAAgC,oBAAjBC,aAA+BA,aAAaC,MAAQ,IAEjEC,EAAoBC,GACf,CAACR,EAAkBG,OAAQK,EAAWR,EAAkBI,QAC1DtC,QAAQlL,GAAUA,GAASA,EAAM6F,OAAS,IAC1CgI,KAAK,KAOD,EAWSC,GACPA,GAAiBH,EAAiBP,EAAkBE,UCrBnE,SAASS,EAAUC,EAAOC,GACtB,MAAMC,EAAgBD,IAEtB,OADAD,EAAMD,UAAUG,GACTA,CACX,CCAO,SAASC,EAAenJ,GAC3B,IAAKA,EACD,MAAM,IAAI,EAAa,oCAAqC,CAAEA,UAIlE,GAAqB,iBAAVA,EAAoB,CAC3B,MAAMoJ,EAAY,IAAIC,IAAIrJ,EAAOsJ,SAASC,MAC1C,MAAO,CACHC,SAAUJ,EAAUG,KACpBE,IAAKL,EAAUG,KAEvB,CACA,MAAM,SAAEG,EAAQ,IAAED,GAAQzJ,EAC1B,IAAKyJ,EACD,MAAM,IAAI,EAAa,oCAAqC,CAAEzJ,UAIlE,IAAK0J,EAAU,CACX,MAAMN,EAAY,IAAIC,IAAII,EAAKH,SAASC,MACxC,MAAO,CACHC,SAAUJ,EAAUG,KACpBE,IAAKL,EAAUG,KAEvB,CAGA,MAAMI,EAAc,IAAIN,IAAII,EAAKH,SAASC,MACpCK,EAAc,IAAIP,IAAII,EAAKH,SAASC,MAE1C,OADAI,EAAYE,aAAaC,IAxCC,kBAwC0BJ,GAC7C,CACHF,SAAUG,EAAYJ,KACtBE,IAAKG,EAAYL,KAEzB,QCzCA,MAAMQ,EACF,WAAA5I,GACI5D,KAAKyM,YAAc,GACnBzM,KAAK0M,eAAiB,GACtB1M,KAAK2M,iBAAmBzI,OAAS8E,UAASzH,YAElCA,IACAA,EAAMqL,gBAAkB5D,EAC5B,EAEJhJ,KAAK6M,yBAA2B3I,OAASuH,QAAOlK,QAAOuL,qBACnD,GAAmB,YAAfrB,EAAMnM,MACFiC,GACAA,EAAMqL,iBACNrL,EAAMqL,2BAA2BG,QAAS,CAE1C,MAAMb,EAAM3K,EAAMqL,gBAAgBV,IAC9BY,EACA9M,KAAK0M,eAAe3J,KAAKmJ,GAGzBlM,KAAKyM,YAAY1J,KAAKmJ,EAE9B,CAEJ,OAAOY,CAAc,CAE7B,EC3BJ,MAAME,EACF,WAAApJ,EAAY,mBAAEqJ,IACVjN,KAAKkN,mBAAqBhJ,OAAS8E,UAASmE,aAGxC,MAAMlB,GAAYkB,aAAuC,EAASA,EAAOlB,WACrEjM,KAAKoN,oBAAoBC,kBAAkBrE,EAAQkD,KAEvD,OAAOD,EACD,IAAIc,QAAQd,EAAU,CAAEqB,QAAStE,EAAQsE,UACzCtE,CAAO,EAEjBhJ,KAAKoN,oBAAsBH,CAC/B,ECnBJ,IAAIM,ECDJ,SAASC,EAAYC,EAASC,GAC1B,MAAMC,EAAc,IAAI7B,IAAI2B,GAC5B,IAAK,MAAMG,KAASF,EAChBC,EAAYrB,aAAauB,OAAOD,GAEpC,OAAOD,EAAY3B,IACvB,CCGA,MAAM8B,EAIF,WAAAlK,GACI5D,KAAK+N,QAAU,IAAI5J,SAAQ,CAACtD,EAASC,KACjCd,KAAKa,QAAUA,EACfb,KAAKc,OAASA,CAAM,GAE5B,ECdJ,MAAMkN,EAAsB,IAAIC,ICKhC,SAASC,EAAUC,GACf,MAAwB,iBAAVA,EAAqB,IAAIpB,QAAQoB,GAASA,CAC5D,QAUA,MAAMC,EAiBF,WAAAxK,CAAYyK,EAAUC,GAClBtO,KAAKuO,WAAa,CAAC,EA8CnBtR,OAAOuR,OAAOxO,KAAMsO,GACpBtO,KAAKyL,MAAQ6C,EAAQ7C,MACrBzL,KAAKyO,UAAYJ,EACjBrO,KAAK0O,iBAAmB,IAAIZ,EAC5B9N,KAAK2O,wBAA0B,GAG/B3O,KAAK4O,SAAW,IAAIP,EAASQ,SAC7B7O,KAAK8O,gBAAkB,IAAIC,IAC3B,IAAK,MAAMC,KAAUhP,KAAK4O,SACtB5O,KAAK8O,gBAAgBvC,IAAIyC,EAAQ,CAAC,GAEtChP,KAAKyL,MAAMD,UAAUxL,KAAK0O,iBAAiBX,QAC/C,CAcA,WAAMlE,CAAMsE,GACR,MAAM,MAAE1C,GAAUzL,KAClB,IAAIgJ,EAAUkF,EAAUC,GACxB,GAAqB,aAAjBnF,EAAQiG,MACRxD,aAAiByD,YACjBzD,EAAM0D,gBAAiB,CACvB,MAAMC,QAAiC3D,EAAM0D,gBAC7C,GAAIC,EAKA,OAAOA,CAEf,CAIA,MAAMxC,EAAkB5M,KAAKqP,YAAY,gBACnCrG,EAAQsG,QACR,KACN,IACI,IAAK,MAAMC,KAAMvP,KAAKwP,iBAAiB,oBACnCxG,QAAgBuG,EAAG,CAAEvG,QAASA,EAAQsG,QAAS7D,SAEvD,CACA,MAAOnN,GACH,GAAIA,aAAekD,MACf,MAAM,IAAI,EAAa,kCAAmC,CACtDiO,mBAAoBnR,EAAIoR,SAGpC,CAIA,MAAMC,EAAwB3G,EAAQsG,QACtC,IACI,IAAIM,EAEJA,QAAsB/F,MAAMb,EAA0B,aAAjBA,EAAQiG,UAAsBlS,EAAYiD,KAAKyO,UAAUoB,cAM9F,IAAK,MAAMC,KAAY9P,KAAKwP,iBAAiB,mBACzCI,QAAsBE,EAAS,CAC3BrE,QACAzC,QAAS2G,EACTxG,SAAUyG,IAGlB,OAAOA,CACX,CACA,MAAOxO,GAeH,MARIwL,SACM5M,KAAK+P,aAAa,eAAgB,CACpC3O,MAAOA,EACPqK,QACAmB,gBAAiBA,EAAgB0C,QACjCtG,QAAS2G,EAAsBL,UAGjClO,CACV,CACJ,CAWA,sBAAM4O,CAAiB7B,GACnB,MAAMhF,QAAiBnJ,KAAK6J,MAAMsE,GAC5B8B,EAAgB9G,EAASmG,QAE/B,OADKtP,KAAKwL,UAAUxL,KAAKkQ,SAAS/B,EAAO8B,IAClC9G,CACX,CAaA,gBAAMgH,CAAW5S,GACb,MAAMyL,EAAUkF,EAAU3Q,GAC1B,IAAIuP,EACJ,MAAM,UAAEzB,EAAS,aAAE+E,GAAiBpQ,KAAKyO,UACnC4B,QAAyBrQ,KAAKsQ,YAAYtH,EAAS,QACnDuH,EAAoBtT,OAAOuR,OAAOvR,OAAOuR,OAAO,CAAC,EAAG4B,GAAe,CAAE/E,cAC3EyB,QAAuBpE,OAAOW,MAAMgH,EAAkBE,GAStD,IAAK,MAAMT,KAAY9P,KAAKwP,iBAAiB,4BACzC1C,QACWgD,EAAS,CACZzE,YACA+E,eACAtD,iBACA9D,QAASqH,EACT5E,MAAOzL,KAAKyL,cACT1O,EAEf,OAAO+P,CACX,CAgBA,cAAMoD,CAAS3S,EAAK4L,GAChB,MAAMH,EAAUkF,EAAU3Q,SCvPvB,IAAI4G,SAAStD,GAAY2P,WAAW3P,ED0PzB,KACd,MAAMwP,QAAyBrQ,KAAKsQ,YAAYtH,EAAS,SAiBzD,IAAKG,EAKD,MAAM,IAAI,EAAa,6BAA8B,CACjD+C,KE1RQA,EF0RYmE,EAAiBnE,IEzRlC,IAAIJ,IAAI2E,OAAOvE,GAAMH,SAASC,MAG/BA,KAAK0E,QAAQ,IAAIC,OAAO,IAAI5E,SAAS6E,UAAW,OAJ3C,IAAC1E,EF6RhB,MAAM2E,QAAwB7Q,KAAK8Q,2BAA2B3H,GAC9D,IAAK0H,EAKD,OAAO,EAEX,MAAM,UAAExF,EAAS,aAAE+E,GAAiBpQ,KAAKyO,UACnCsC,QAAcrS,KAAKgK,OAAOe,KAAK4B,GAC/B2F,EAAyBhR,KAAKqP,YAAY,kBAC1C4B,EAAcD,QHtR5B9M,eAAsC6M,EAAO/H,EAAS0E,EAAc0C,GAChE,MAAMc,EAAqB1D,EAAYxE,EAAQkD,IAAKwB,GAEpD,GAAI1E,EAAQkD,MAAQgF,EAChB,OAAOH,EAAM1H,MAAML,EAASoH,GAGhC,MAAMe,EAAclU,OAAOuR,OAAOvR,OAAOuR,OAAO,CAAC,EAAG4B,GAAe,CAAEgB,cAAc,IAC7EC,QAAkBN,EAAM1M,KAAK2E,EAASmI,GAC5C,IAAK,MAAMlF,KAAYoF,EAEnB,GAAIH,IADwB1D,EAAYvB,EAASC,IAAKwB,GAElD,OAAOqD,EAAM1H,MAAM4C,EAAUmE,EAIzC,CGuQoBkB,CAIRP,EAAOV,EAAiBf,QAAS,CAAC,mBAAoBc,GACpD,KAKN,UACUW,EAAMQ,IAAIlB,EAAkBW,EAAyBH,EAAgBvB,QAAUuB,EACzF,CACA,MAAOzP,GACH,GAAIA,aAAiBI,MAKjB,KAHmB,uBAAfJ,EAAMyC,YGhT1BK,iBAKI,IAAK,MAAM4L,KAAY9B,QACb8B,GAQd,CHmS0B0B,GAEJpQ,CAEd,CACA,IAAK,MAAM0O,KAAY9P,KAAKwP,iBAAiB,wBACnCM,EAAS,CACXzE,YACA4F,cACAQ,YAAaZ,EAAgBvB,QAC7BtG,QAASqH,EACT5E,MAAOzL,KAAKyL,QAGpB,OAAO,CACX,CAYA,iBAAM6E,CAAYtH,EAASiG,GACvB,MAAM1R,EAAM,GAAGyL,EAAQkD,SAAS+C,IAChC,IAAKjP,KAAKuO,WAAWhR,GAAM,CACvB,IAAI8S,EAAmBrH,EACvB,IAAK,MAAM8G,KAAY9P,KAAKwP,iBAAiB,sBACzCa,EAAmBnC,QAAgB4B,EAAS,CACxCb,OACAjG,QAASqH,EACT5E,MAAOzL,KAAKyL,MAEZ0B,OAAQnN,KAAKmN,UAGrBnN,KAAKuO,WAAWhR,GAAO8S,CAC3B,CACA,OAAOrQ,KAAKuO,WAAWhR,EAC3B,CAQA,WAAA8R,CAAYxL,GACR,IAAK,MAAMmL,KAAUhP,KAAKyO,UAAUI,QAChC,GAAIhL,KAAQmL,EACR,OAAO,EAGf,OAAO,CACX,CAiBA,kBAAMe,CAAalM,EAAM+J,GACrB,IAAK,MAAMkC,KAAY9P,KAAKwP,iBAAiB3L,SAGnCiM,EAASlC,EAEvB,CAUA,iBAAC4B,CAAiB3L,GACd,IAAK,MAAMmL,KAAUhP,KAAKyO,UAAUI,QAChC,GAA4B,mBAAjBG,EAAOnL,GAAsB,CACpC,MAAMtC,EAAQvB,KAAK8O,gBAAgB4C,IAAI1C,GACjC2C,EAAoB/D,IACtB,MAAMgE,EAAgB3U,OAAOuR,OAAOvR,OAAOuR,OAAO,CAAC,EAAGZ,GAAQ,CAAErM,UAGhE,OAAOyN,EAAOnL,GAAM+N,EAAc,QAEhCD,CACV,CAER,CAcA,SAAAnG,CAAUuC,GAEN,OADA/N,KAAK2O,wBAAwB5L,KAAKgL,GAC3BA,CACX,CAWA,iBAAM8D,GACF,IAAI9D,EACJ,KAAQA,EAAU/N,KAAK2O,wBAAwBmD,eACrC/D,CAEd,CAKA,OAAAgE,GACI/R,KAAK0O,iBAAiB7N,QAAQ,KAClC,CAWA,gCAAMiQ,CAA2B3H,GAC7B,IAAI0H,EAAkB1H,EAClB6I,GAAc,EAClB,IAAK,MAAMlC,KAAY9P,KAAKwP,iBAAiB,mBAQzC,GAPAqB,QACWf,EAAS,CACZ9G,QAAShJ,KAAKgJ,QACdG,SAAU0H,EACVpF,MAAOzL,KAAKyL,cACT1O,EACXiV,GAAc,GACTnB,EACD,MAwBR,OArBKmB,GACGnB,GAA8C,MAA3BA,EAAgB/G,SACnC+G,OAAkB9T,GAmBnB8T,CACX,EIhfJ,MAAMoB,EAuBF,WAAArO,CAAY0K,EAAU,CAAC,GAQnBtO,KAAKqL,UAAsCiD,EAAQjD,WbN3BD,EAAiBP,EAAkBhO,Sac3DmD,KAAK6O,QAAUP,EAAQO,SAAW,GAQlC7O,KAAK6P,aAAevB,EAAQuB,aAQ5B7P,KAAKoQ,aAAe9B,EAAQ8B,YAChC,CAoBA,MAAAlL,CAAOoJ,GACH,MAAO4D,GAAgBlS,KAAKmS,UAAU7D,GACtC,OAAO4D,CACX,CAuBA,SAAAC,CAAU7D,GAEFA,aAAmBY,aACnBZ,EAAU,CACN7C,MAAO6C,EACPtF,QAASsF,EAAQtF,UAGzB,MAAMyC,EAAQ6C,EAAQ7C,MAChBzC,EAAqC,iBAApBsF,EAAQtF,QACzB,IAAI+D,QAAQuB,EAAQtF,SACpBsF,EAAQtF,QACRmE,EAAS,WAAYmB,EAAUA,EAAQnB,YAASpQ,EAChDqV,EAAU,IAAIhE,EAAgBpO,KAAM,CAAEyL,QAAOzC,UAASmE,WACtD+E,EAAelS,KAAKqS,aAAaD,EAASpJ,EAASyC,GAGzD,MAAO,CAACyG,EAFYlS,KAAKsS,eAAeJ,EAAcE,EAASpJ,EAASyC,GAG5E,CACA,kBAAM4G,CAAaD,EAASpJ,EAASyC,GAEjC,IAAItC,QADEiJ,EAAQrC,aAAa,mBAAoB,CAAEtE,QAAOzC,YAExD,IAKI,GAJAG,QAAiBnJ,KAAKuS,QAAQvJ,EAASoJ,IAIlCjJ,GAA8B,UAAlBA,EAAS7J,KACtB,MAAM,IAAI,EAAa,cAAe,CAAE4M,IAAKlD,EAAQkD,KAE7D,CACA,MAAO9K,GACH,GAAIA,aAAiBI,MACjB,IAAK,MAAMsO,KAAYsC,EAAQ5C,iBAAiB,mBAE5C,GADArG,QAAiB2G,EAAS,CAAE1O,QAAOqK,QAAOzC,YACtCG,EACA,MAIZ,IAAKA,EACD,MAAM/H,CAOd,CACA,IAAK,MAAM0O,KAAYsC,EAAQ5C,iBAAiB,sBAC5CrG,QAAiB2G,EAAS,CAAErE,QAAOzC,UAASG,aAEhD,OAAOA,CACX,CACA,oBAAMmJ,CAAeJ,EAAcE,EAASpJ,EAASyC,GACjD,IAAItC,EACA/H,EACJ,IACI+H,QAAiB+I,CACrB,CACA,MAAO9Q,GAIP,CACA,UACUgR,EAAQrC,aAAa,oBAAqB,CAC5CtE,QACAzC,UACAG,mBAEEiJ,EAAQP,aAClB,CACA,MAAOW,GACCA,aAA0BhR,QAC1BJ,EAAQoR,EAEhB,CAQA,SAPMJ,EAAQrC,aAAa,qBAAsB,CAC7CtE,QACAzC,UACAG,WACA/H,MAAOA,IAEXgR,EAAQL,UACJ3Q,EACA,MAAMA,CAEd,ECtLJ,MAAMqR,UAAyBR,EAkB3B,WAAArO,CAAY0K,EAAU,CAAC,GACnBA,EAAQjD,UAAY,EAA2BiD,EAAQjD,WACvDf,MAAMgE,GACNtO,KAAK0S,oBAC6B,IAA9BpE,EAAQqE,kBAKZ3S,KAAK6O,QAAQ9L,KAAK0P,EAAiBG,uCACvC,CAQA,aAAML,CAAQvJ,EAASoJ,GAEnB,aADuBA,EAAQjC,WAAWnH,KAMtCoJ,EAAQ3G,OAAgC,YAAvB2G,EAAQ3G,MAAMnM,WAClBU,KAAK6S,eAAe7J,EAASoJ,SAIjCpS,KAAK8S,aAAa9J,EAASoJ,GAC5C,CACA,kBAAMU,CAAa9J,EAASoJ,GACxB,IAAIjJ,EACJ,MAAMgE,EAAUiF,EAAQjF,QAAU,CAAC,EAEnC,IAAInN,KAAK0S,mBAuCL,MAAM,IAAI,EAAa,yBAA0B,CAC7CrH,UAAWrL,KAAKqL,UAChBa,IAAKlD,EAAQkD,MAzCQ,CAMzB,MAAM6G,EAAsB5F,EAAO6F,UAC7BC,EAAqBjK,EAAQgK,UAC7BE,GAAuBD,GAAsBA,IAAuBF,EAG1E5J,QAAiBiJ,EAAQvI,MAAM,IAAIkD,QAAQ/D,EAAS,CAChDgK,UAA4B,YAAjBhK,EAAQiG,KACbgE,GAAsBF,OACtBhW,KASNgW,GACAG,GACiB,YAAjBlK,EAAQiG,OACRjP,KAAKmT,8CACmBf,EAAQlC,SAASlH,EAASG,EAASmG,SAQnE,CAuBA,OAAOnG,CACX,CACA,oBAAM0J,CAAe7J,EAASoJ,GAC1BpS,KAAKmT,wCACL,MAAMhK,QAAiBiJ,EAAQvI,MAAMb,GAIrC,UADwBoJ,EAAQlC,SAASlH,EAASG,EAASmG,SAIvD,MAAM,IAAI,EAAa,0BAA2B,CAC9CpD,IAAKlD,EAAQkD,IACbpC,OAAQX,EAASW,SAGzB,OAAOX,CACX,CA4BA,qCAAAgK,GACI,IAAIC,EAAqB,KACrBC,EAA6B,EACjC,IAAK,MAAOC,EAAOtE,KAAWhP,KAAK6O,QAAQ0E,UAEnCvE,IAAWyD,EAAiBG,yCAI5B5D,IAAWyD,EAAiBe,oCAC5BJ,EAAqBE,GAErBtE,EAAOyE,iBACPJ,KAG2B,IAA/BA,EACArT,KAAK6O,QAAQ9L,KAAK0P,EAAiBe,mCAE9BH,EAA6B,GAA4B,OAAvBD,GAEvCpT,KAAK6O,QAAQ6E,OAAON,EAAoB,EAGhD,EAEJX,EAAiBe,kCAAoC,CACjDtP,gBAAqB,OAAC,SAAEiF,MACfA,GAAYA,EAASW,QAAU,IACzB,KAEJX,GAGfsJ,EAAiBG,uCAAyC,CACtD1O,gBAAqB,OAAC,SAAEiF,KACbA,EAASwK,iBC9LxBzP,eAA4BiF,EAAUyK,GAClC,IAAIhD,EAAS,KAMb,GAJIzH,EAAS+C,MAET0E,EADoB,IAAI9E,IAAI3C,EAAS+C,KAChB0E,QAErBA,IAAWlS,KAAKqN,SAAS6E,OACzB,MAAM,IAAI,EAAa,6BAA8B,CAAEA,WAE3D,MAAMiD,EAAiB1K,EAASmG,QAE1BwE,EAAe,CACjBxG,QAAS,IAAIyG,QAAQF,EAAevG,SACpCxD,OAAQ+J,EAAe/J,OACvBkK,WAAYH,EAAeG,YAGzBC,EAAuBL,EAAWA,EAASE,GAAgBA,EAI3DI,EVjCV,WACI,QAAsBnX,IAAlBwQ,EAA6B,CAC7B,MAAM4G,EAAe,IAAIC,SAAS,IAClC,GAAI,SAAUD,EACV,IACI,IAAIC,SAASD,EAAaD,MAC1B3G,GAAgB,CACpB,CACA,MAAOnM,GACHmM,GAAgB,CACpB,CAEJA,GAAgB,CACpB,CACA,OAAOA,CACX,CUkBiB8G,GACPR,EAAeK,WACTL,EAAeS,OAC3B,OAAO,IAAIF,SAASF,EAAMD,EAC9B,CDoK2CM,CAAapL,GAAYA,GEnMpE,MAAMqL,EAWF,WAAA5Q,EAAY,UAAEyH,EAAS,QAAEwD,EAAU,GAAE,kBAAE8D,GAAoB,GAAU,CAAC,GAClE3S,KAAKyU,iBAAmB,IAAI1F,IAC5B/O,KAAK0U,kBAAoB,IAAI3F,IAC7B/O,KAAK2U,wBAA0B,IAAI5F,IACnC/O,KAAKyO,UAAY,IAAIgE,EAAiB,CAClCpH,UAAW,EAA2BA,GACtCwD,QAAS,IACFA,EACH,IAAI7B,EAAuB,CAAEC,mBAAoBjN,QAErD2S,sBAGJ3S,KAAK4U,QAAU5U,KAAK4U,QAAQC,KAAK7U,MACjCA,KAAK8U,SAAW9U,KAAK8U,SAASD,KAAK7U,KACvC,CAKA,YAAIqO,GACA,OAAOrO,KAAKyO,SAChB,CAWA,QAAA1D,CAASwI,GACLvT,KAAK+U,eAAexB,GACfvT,KAAKgV,kCACNtW,KAAKuW,iBAAiB,UAAWjV,KAAK4U,SACtClW,KAAKuW,iBAAiB,WAAYjV,KAAK8U,UACvC9U,KAAKgV,iCAAkC,EAE/C,CAQA,cAAAD,CAAexB,GASX,MAAM2B,EAAkB,GACxB,IAAK,MAAMzS,KAAS8Q,EAAS,CAEJ,iBAAV9Q,EACPyS,EAAgBnS,KAAKN,GAEhBA,QAA4B1F,IAAnB0F,EAAM0J,UACpB+I,EAAgBnS,KAAKN,EAAMyJ,KAE/B,MAAM,SAAED,EAAQ,IAAEC,GAAQN,EAAenJ,GACnC0S,EAA6B,iBAAV1S,GAAsBA,EAAM0J,SAAW,SAAW,UAC3E,GAAInM,KAAKyU,iBAAiBW,IAAIlJ,IAC1BlM,KAAKyU,iBAAiB/C,IAAIxF,KAASD,EACnC,MAAM,IAAI,EAAa,wCAAyC,CAC5DoJ,WAAYrV,KAAKyU,iBAAiB/C,IAAIxF,GACtCoJ,YAAarJ,IAGrB,GAAqB,iBAAVxJ,GAAsBA,EAAMuQ,UAAW,CAC9C,GAAIhT,KAAK2U,wBAAwBS,IAAInJ,IACjCjM,KAAK2U,wBAAwBjD,IAAIzF,KAAcxJ,EAAMuQ,UACrD,MAAM,IAAI,EAAa,4CAA6C,CAChE9G,QAGRlM,KAAK2U,wBAAwBpI,IAAIN,EAAUxJ,EAAMuQ,UACrD,CAGA,GAFAhT,KAAKyU,iBAAiBlI,IAAIL,EAAKD,GAC/BjM,KAAK0U,kBAAkBnI,IAAIL,EAAKiJ,GAC5BD,EAAgB5R,OAAS,EAAG,CAC5B,MAAMiS,EACF,qDAASL,EAAgB5J,KAAK,8EAK9BkK,QAAQC,KAAKF,EAKrB,CACJ,CACJ,CAWA,OAAAX,CAAQnJ,GAGJ,OAAOD,EAAUC,GAAOvH,UACpB,MAAMwR,EAAsB,IAAIlJ,EAChCxM,KAAKqO,SAASQ,QAAQ9L,KAAK2S,GAG3B,IAAK,MAAOxJ,EAAKD,KAAajM,KAAKyU,iBAAkB,CACjD,MAAMzB,EAAYhT,KAAK2U,wBAAwBjD,IAAIzF,GAC7CkJ,EAAYnV,KAAK0U,kBAAkBhD,IAAIxF,GACvClD,EAAU,IAAI+D,QAAQb,EAAK,CAC7B8G,YACAjC,MAAOoE,EACPQ,YAAa,sBAEXxR,QAAQyR,IAAI5V,KAAKqO,SAAS8D,UAAU,CACtChF,OAAQ,CAAElB,YACVjD,UACAyC,UAER,CACA,MAAM,YAAEgB,EAAW,eAAEC,GAAmBgJ,EAIxC,MAAO,CAAEjJ,cAAaC,iBAAgB,GAE9C,CAWA,QAAAoI,CAASrJ,GAGL,OAAOD,EAAUC,GAAOvH,UACpB,MAAM6M,QAAcrS,KAAKgK,OAAOe,KAAKzJ,KAAKqO,SAAShD,WAC7CwK,QAAgC9E,EAAM1M,OACtCyR,EAAoB,IAAI7H,IAAIjO,KAAKyU,iBAAiBrU,UAClD2V,EAAc,GACpB,IAAK,MAAM/M,KAAW6M,EACbC,EAAkBV,IAAIpM,EAAQkD,aACzB6E,EAAMlD,OAAO7E,GACnB+M,EAAYhT,KAAKiG,EAAQkD,MAMjC,MAAO,CAAE6J,cAAa,GAE9B,CAOA,kBAAAC,GACI,OAAOhW,KAAKyU,gBAChB,CAOA,aAAAwB,GACI,MAAO,IAAIjW,KAAKyU,iBAAiBpQ,OACrC,CAUA,iBAAAgJ,CAAkBnB,GACd,MAAML,EAAY,IAAIC,IAAII,EAAKH,SAASC,MACxC,OAAOhM,KAAKyU,iBAAiB/C,IAAI7F,EAAUG,KAC/C,CAMA,uBAAAkK,CAAwBjK,GACpB,OAAOjM,KAAK2U,wBAAwBjD,IAAIzF,EAC5C,CAmBA,mBAAMkK,CAAcnN,GAChB,MAAMkD,EAAMlD,aAAmB+D,QAAU/D,EAAQkD,IAAMlD,EACjDiD,EAAWjM,KAAKqN,kBAAkBnB,GACxC,GAAID,EAEA,aADoBvN,KAAKgK,OAAOe,KAAKzJ,KAAKqO,SAAShD,YACtChC,MAAM4C,EAG3B,CASA,uBAAAmK,CAAwBlK,GACpB,MAAMD,EAAWjM,KAAKqN,kBAAkBnB,GACxC,IAAKD,EACD,MAAM,IAAI,EAAa,oBAAqB,CAAEC,QAElD,OAAQoC,IACJA,EAAQtF,QAAU,IAAI+D,QAAQb,GAC9BoC,EAAQnB,OAASlQ,OAAOuR,OAAO,CAAEvC,YAAYqC,EAAQnB,QAC9CnN,KAAKqO,SAASnJ,OAAOoJ,GAEpC,ECxRJ,IAAIrB,EAKG,MAAM,EAAgC,KACpCA,IACDA,EAAqB,IAAIuH,GAEtBvH,UCFJ,MCAMoJ,EAAoBjE,GACzBA,GAA8B,iBAAZA,EASXA,EAWA,CAAElN,OAAQkN,GCjBzB,MAAMkE,EAYF,WAAA1S,CAAYyF,EAAO+I,EAAS5R,EFhBH,OE8BrBR,KAAKoS,QAAUiE,EAAiBjE,GAChCpS,KAAKqJ,MAAQA,EACbrJ,KAAKQ,OAASA,CAClB,CAMA,eAAA+V,CAAgBnE,GACZpS,KAAKwW,aAAeH,EAAiBjE,EACzC,ECnCJ,MAAMqE,UAAoBH,EActB,WAAA1S,CAAY8S,EAAQtE,EAAS5R,GAiCzB8J,OAxBc,EAAG4B,UACb,MAAMlL,EAAS0V,EAAOC,KAAKzK,EAAIF,MAE/B,GAAKhL,IAODkL,EAAI0E,SAAW7E,SAAS6E,QAA2B,IAAjB5P,EAAOsS,OAY7C,OAAOtS,EAAO6D,MAAM,EAAE,GAEbuN,EAAS5R,EAC1B,ECvCJ,MAAMoW,EAIF,WAAAhT,GACI5D,KAAK6W,QAAU,IAAI9H,IACnB/O,KAAK8W,mBAAqB,IAAI/H,GAClC,CAMA,UAAIgI,GACA,OAAO/W,KAAK6W,OAChB,CAKA,gBAAAG,GAEItY,KAAKuW,iBAAiB,SAAWxJ,IAC7B,MAAM,QAAEzC,GAAYyC,EACdwL,EAAkBjX,KAAKkX,cAAc,CAAElO,UAASyC,UAClDwL,GACAxL,EAAM0L,YAAYF,EAEzB,GACL,CAuBA,gBAAAG,GAEI1Y,KAAKuW,iBAAiB,WAAaxJ,IAG/B,GAAIA,EAAM4L,MAA4B,eAApB5L,EAAM4L,KAAK/X,KAAuB,CAEhD,MAAM,QAAEgY,GAAY7L,EAAM4L,KAIpBE,EAAkBpT,QAAQyR,IAAI0B,EAAQE,YAAY3O,KAAKpG,IACpC,iBAAVA,IACPA,EAAQ,CAACA,IAEb,MAAMuG,EAAU,IAAI+D,WAAWtK,GAC/B,OAAOzC,KAAKkX,cAAc,CAAElO,UAASyC,SAAQ,KAKjDA,EAAMD,UAAU+L,GAEZ9L,EAAMgM,OAAShM,EAAMgM,MAAM,IACtBF,EAAgBrW,MAAK,IAAMuK,EAAMgM,MAAM,GAAGC,aAAY,IAEnE,CACH,GACL,CAaA,aAAAR,EAAc,QAAElO,EAAO,MAAEyC,IASrB,MAAMS,EAAM,IAAIJ,IAAI9C,EAAQkD,IAAKH,SAASC,MAC1C,IAAKE,EAAIyL,SAASC,WAAW,QAIzB,OAEJ,MAAMC,EAAa3L,EAAI0E,SAAW7E,SAAS6E,QACrC,OAAEzD,EAAM,MAAE2K,GAAU9X,KAAK+X,kBAAkB,CAC7CtM,QACAzC,UACA6O,aACA3L,QAEJ,IAAIkG,EAAU0F,GAASA,EAAM1F,QAe7B,MAAM5R,EAASwI,EAAQxI,OAQvB,IAPK4R,GAAWpS,KAAK8W,mBAAmB1B,IAAI5U,KAKxC4R,EAAUpS,KAAK8W,mBAAmBpF,IAAIlR,KAErC4R,EAMD,OAkBJ,IAAI6E,EACJ,IACIA,EAAkB7E,EAAQlN,OAAO,CAAEgH,MAAKlD,UAASyC,QAAO0B,UAC5D,CACA,MAAO7O,GACH2Y,EAAkB9S,QAAQrD,OAAOxC,EACrC,CAEA,MAAMkY,EAAesB,GAASA,EAAMtB,aAuCpC,OAtCIS,aAA2B9S,UAC1BnE,KAAKgY,eAAiBxB,KACvBS,EAAkBA,EAAgBgB,OAAM/T,MAAO5F,IAE3C,GAAIkY,EAUA,IACI,aAAaA,EAAatR,OAAO,CAAEgH,MAAKlD,UAASyC,QAAO0B,UAC5D,CACA,MAAO+K,GACCA,aAAoB1W,QACpBlD,EAAM4Z,EAEd,CAEJ,GAAIlY,KAAKgY,cAUL,OAAOhY,KAAKgY,cAAc9S,OAAO,CAAEgH,MAAKlD,UAASyC,UAErD,MAAMnN,CAAG,KAGV2Y,CACX,CAgBA,iBAAAc,EAAkB,IAAE7L,EAAG,WAAE2L,EAAU,QAAE7O,EAAO,MAAEyC,IAC1C,MAAMsL,EAAS/W,KAAK6W,QAAQnF,IAAI1I,EAAQxI,SAAW,GACnD,IAAK,MAAMsX,KAASf,EAAQ,CACxB,IAAI5J,EAGJ,MAAMgL,EAAcL,EAAMzO,MAAM,CAAE6C,MAAK2L,aAAY7O,UAASyC,UAC5D,GAAI0M,EA6BA,OAjBAhL,EAASgL,GACLC,MAAMC,QAAQlL,IAA6B,IAAlBA,EAAO7J,QAI3B6U,EAAYvU,cAAgB3G,QACG,IAApCA,OAAOoH,KAAK8T,GAAa7U,QAIG,kBAAhB6U,KAPZhL,OAASpQ,GAcN,CAAE+a,QAAO3K,SAExB,CAEA,MAAO,CAAC,CACZ,CAeA,iBAAAmL,CAAkBlG,EAAS5R,EJ1SF,OI2SrBR,KAAK8W,mBAAmBvK,IAAI/L,EAAQ6V,EAAiBjE,GACzD,CAQA,eAAAmE,CAAgBnE,GACZpS,KAAKgY,cAAgB3B,EAAiBjE,EAC1C,CAMA,aAAAmG,CAAcT,GAiCL9X,KAAK6W,QAAQzB,IAAI0C,EAAMtX,SACxBR,KAAK6W,QAAQtK,IAAIuL,EAAMtX,OAAQ,IAInCR,KAAK6W,QAAQnF,IAAIoG,EAAMtX,QAAQuC,KAAK+U,EACxC,CAMA,eAAAU,CAAgBV,GACZ,IAAK9X,KAAK6W,QAAQzB,IAAI0C,EAAMtX,QACxB,MAAM,IAAI,EAAa,6CAA8C,CACjEA,OAAQsX,EAAMtX,SAGtB,MAAMiY,EAAazY,KAAK6W,QAAQnF,IAAIoG,EAAMtX,QAAQkY,QAAQZ,GAC1D,KAAIW,GAAc,GAId,MAAM,IAAI,EAAa,yCAHvBzY,KAAK6W,QAAQnF,IAAIoG,EAAMtX,QAAQkT,OAAO+E,EAAY,EAK1D,EC7XJ,IAAIE,ECYJ,MAAMC,UAAsBtC,EAiBxB,WAAA1S,CAAYqJ,EAAoBqB,GAe5BhE,OAdc,EAAGtB,cACb,MAAM6P,EAAkB5L,EAAmB+I,qBAC3C,IAAK,MAAM8C,KCtBhB,UAAgC5M,GAAK,4BAAE6M,EAA8B,CAAC,QAAS,YAAW,eAAEC,EAAiB,aAAY,UAAEC,GAAY,EAAI,gBAAEC,GAAqB,CAAC,GACtK,MAAMrN,EAAY,IAAIC,IAAII,EAAKH,SAASC,MACxCH,EAAUsN,KAAO,SACXtN,EAAUG,KAChB,MAAMoN,ECHH,SAAmCvN,EAAWkN,EAA8B,IAG/E,IAAK,MAAMM,IAAa,IAAIxN,EAAUS,aAAajI,QAC3C0U,EAA4BO,MAAM5C,GAAWA,EAAO6C,KAAKF,MACzDxN,EAAUS,aAAauB,OAAOwL,GAGtC,OAAOxN,CACX,CDNoC2N,CAA0B3N,EAAWkN,GAErE,SADMK,EAAwBpN,KAC1BgN,GAAkBI,EAAwBK,SAASC,SAAS,KAAM,CAClE,MAAMC,EAAe,IAAI7N,IAAIsN,EAAwBpN,MACrD2N,EAAaF,UAAYT,QACnBW,EAAa3N,IACvB,CACA,GAAIiN,EAAW,CACX,MAAMW,EAAW,IAAI9N,IAAIsN,EAAwBpN,MACjD4N,EAASH,UAAY,cACfG,EAAS5N,IACnB,CACA,GAAIkN,EAAiB,CACjB,MAAMW,EAAiBX,EAAgB,CAAEhN,IAAKL,IAC9C,IAAK,MAAMiO,KAAgBD,QACjBC,EAAa9N,IAE3B,CACJ,CDAsC+N,CAAsB/Q,EAAQkD,IAAKoC,GAAU,CACnE,MAAMrC,EAAW4M,EAAgBnH,IAAIoH,GACrC,GAAI7M,EAEA,MAAO,CAAEA,WAAU+G,UADD/F,EAAmBiJ,wBAAwBjK,GAGrE,CAIM,GAEGgB,EAAmBoB,SACpC,EG9BJ,ICIkBkF,ICvBD7U,KAAKsb,cDwBS,IACRjP,SAASwI,GELhC,SAAkBjF,GACd,MAAMrB,EAAqB,KCK/B,SAAuBgN,EAAS7H,EAAS5R,GACrC,IAAIsX,EACJ,GAAuB,iBAAZmC,EAAsB,CAC7B,MAAMC,EAAa,IAAIpO,IAAImO,EAASlO,SAASC,MAkC7C8L,EAAQ,IAAIxB,GAZU,EAAGpK,SASdA,EAAIF,OAASkO,EAAWlO,MAGFoG,EAAS5R,EAC9C,MACK,GAAIyZ,aAAmBtJ,OAExBmH,EAAQ,IAAIrB,EAAYwD,EAAS7H,EAAS5R,QAEzC,GAAuB,mBAAZyZ,EAEZnC,EAAQ,IAAIxB,EAAM2D,EAAS7H,EAAS5R,OAEnC,MAAIyZ,aAAmB3D,GAIxB,MAAM,IAAI,EAAa,yBAA0B,CAC7C6D,WAAY,kBACZC,SAAU,gBACVf,UAAW,YANfvB,EAAQmC,CAQZ,ERrEKtB,IACDA,EAAgB,IAAI/B,EAEpB+B,EAAc3B,mBACd2B,EAAcvB,oBAEXuB,GQiEOJ,cAAcT,EAEhC,CD/DIS,CADsB,IAAIK,EAAc3L,EAAoBqB,GAEhE,CHHI+L,CAF+B/L,WEfnC,IAAMgM,EAAgB,CACpB,KACA,yBACA,yBACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,eACA,gBACA,kBACA,oBACA,kBAGF5b,KAAKuW,iBAAiB,WAAW,SAACxJ,GAChCA,EAAMD,UAAU+O,EAAYvS,gBAAgB,GAADwS,OAAKF,IAClD,IAEA5b,KAAKuW,iBAAiB,YAAY,SAACxJ,GACjCA,EAAMD,UAAU+O,EAAYhS,iBAC9B,IAEA7J,KAAKuW,iBAAiB,SAAS,SAACxJ,GAC9BA,EAAM0L,YAAYoD,EAAYxR,gBAAgB0C,EAAMzC,SACtD","sources":["webpack://restaurant-api/./node_modules/regenerator-runtime/runtime.js","webpack://restaurant-api/./node_modules/workbox-core/_version.js","webpack://restaurant-api/./node_modules/workbox-precaching/_version.js","webpack://restaurant-api/./node_modules/workbox-routing/_version.js","webpack://restaurant-api/./node_modules/workbox-strategies/_version.js","webpack://restaurant-api/webpack/bootstrap","webpack://restaurant-api/./src/scripts/globals/config.js","webpack://restaurant-api/./src/scripts/utils/cache-helper.js","webpack://restaurant-api/./node_modules/workbox-core/_private/WorkboxError.js","webpack://restaurant-api/./node_modules/workbox-core/models/messages/messageGenerator.js","webpack://restaurant-api/./node_modules/workbox-core/_private/assert.js","webpack://restaurant-api/./node_modules/workbox-core/_private/cacheNames.js","webpack://restaurant-api/./node_modules/workbox-core/_private/waitUntil.js","webpack://restaurant-api/./node_modules/workbox-precaching/utils/createCacheKey.js","webpack://restaurant-api/./node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","webpack://restaurant-api/./node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","webpack://restaurant-api/./node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","webpack://restaurant-api/./node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","webpack://restaurant-api/./node_modules/workbox-core/_private/Deferred.js","webpack://restaurant-api/./node_modules/workbox-core/models/quotaErrorCallbacks.js","webpack://restaurant-api/./node_modules/workbox-strategies/StrategyHandler.js","webpack://restaurant-api/./node_modules/workbox-core/_private/timeout.js","webpack://restaurant-api/./node_modules/workbox-core/_private/getFriendlyURL.js","webpack://restaurant-api/./node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","webpack://restaurant-api/./node_modules/workbox-strategies/Strategy.js","webpack://restaurant-api/./node_modules/workbox-precaching/PrecacheStrategy.js","webpack://restaurant-api/./node_modules/workbox-core/copyResponse.js","webpack://restaurant-api/./node_modules/workbox-precaching/PrecacheController.js","webpack://restaurant-api/./node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","webpack://restaurant-api/./node_modules/workbox-routing/utils/constants.js","webpack://restaurant-api/./node_modules/workbox-routing/utils/normalizeHandler.js","webpack://restaurant-api/./node_modules/workbox-routing/Route.js","webpack://restaurant-api/./node_modules/workbox-routing/RegExpRoute.js","webpack://restaurant-api/./node_modules/workbox-routing/Router.js","webpack://restaurant-api/./node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","webpack://restaurant-api/./node_modules/workbox-precaching/PrecacheRoute.js","webpack://restaurant-api/./node_modules/workbox-precaching/utils/generateURLVariations.js","webpack://restaurant-api/./node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","webpack://restaurant-api/./node_modules/workbox-precaching/precacheAndRoute.js","webpack://restaurant-api/./node_modules/workbox-precaching/precache.js","webpack://restaurant-api/./src/scripts/sw.js","webpack://restaurant-api/./node_modules/workbox-precaching/addRoute.js","webpack://restaurant-api/./node_modules/workbox-routing/registerRoute.js"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; };\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) });\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: true });\n  defineProperty(\n    GeneratorFunctionPrototype,\n    \"constructor\",\n    { value: GeneratorFunction, configurable: true }\n  );\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    defineProperty(this, \"_invoke\", { value: enqueue });\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per GeneratorResume behavior specified since ES2015:\n        // ES2015 spec, step 3: https://262.ecma-international.org/6.0/#sec-generatorresume\n        // Latest spec, step 2: https://tc39.es/ecma262/#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method;\n    var method = delegate.iterator[methodName];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method, or a missing .next method, always terminate the\n      // yield* loop.\n      context.delegate = null;\n\n      // Note: [\"return\"] must be used for ES3 parsing compatibility.\n      if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n        // If the delegate iterator has a return method, give it a\n        // chance to clean up.\n        context.method = \"return\";\n        context.arg = undefined;\n        maybeInvokeDelegate(delegate, context);\n\n        if (context.method === \"throw\") {\n          // If maybeInvokeDelegate(context) changed context.method from\n          // \"return\" to \"throw\", let that override the TypeError below.\n          return ContinueSentinel;\n        }\n      }\n      if (methodName !== \"return\") {\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a '\" + methodName + \"' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(val) {\n    var object = Object(val);\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable != null) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    throw new TypeError(typeof iterable + \" is not iterable\");\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:7.2.0'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:7.2.0'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.2.0'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.2.0'] && _();\n}\ncatch (e) { }\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const CONFIG = {\n  BASE_URL: 'https://restaurant-api.dicoding.dev',\n  IMAGE_SMALL: 'https://restaurant-api.dicoding.dev/images/small/<pictureId>',\n  IMAGE_MEDIUM: 'https://restaurant-api.dicoding.dev/images/medium/<pictureId>',\n  IMAGE_LARGE: 'https://restaurant-api.dicoding.dev/images/large/<pictureId>',\n  DEFAULT_LANGUAGE: 'en-us',\n  CACHE_NAME: 'RestauranHungerDB',\n  DATABASE_NAME: 'RestauranDB',\n  DATABASE_VERSION: 1,\n  OBJECT_STORE_NAME: 'restaurants',\n};\n\nexport default CONFIG;\n","import CONFIG from '../globals/config';\n\nconst CacheHelper = {\n  async cachingAppShell(requests) {\n    const cache = await this._openCache();\n    cache.addAll(requests);\n  },\n\n  async deleteOldCache() {\n    const cacheNames = await caches.keys();\n    cacheNames\n      .filter((name) => name !== CONFIG.CACHE_NAME)\n      .map((filteredName) => caches.delete(filteredName));\n  },\n\n  async revalidateCache(request) {\n    const response = await caches.match(request);\n\n    if (response) {\n      this._fetchRequest(request);\n      return response;\n    }\n    return this._fetchRequest(request);\n  },\n\n  async _openCache() {\n    return caches.open(CONFIG.CACHE_NAME);\n  },\n\n  async _fetchRequest(request) {\n    const response = await fetch(request);\n\n    if (!response || response.status !== 200) {\n      return response;\n    }\n\n    await this._addCache(request);\n    return response;\n  },\n\n  async _addCache(request) {\n    const cache = await this._openCache();\n    cache.add(request);\n  },\n};\n\nexport default CacheHelper;","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, \n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClassName'] = expectedClass.name;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, \n// Need general type to do check later.\nexpectedClass, // eslint-disable-line\ndetails) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production'\n    ? null\n    : {\n        hasMethod,\n        isArray,\n        isInstance,\n        isOneOf,\n        isType,\n        isArrayOfClass,\n    };\nexport { finalAssertExports as assert };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cachedResponseWillBeUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","import 'regenerator-runtime';\nimport CacheHelper from './utils/cache-helper';\nimport { precacheAndRoute } from 'workbox-precaching';\n\n// Menyuntikkan manifest secara otomatis\nprecacheAndRoute(self.__WB_MANIFEST);\n\n\n// Daftar asset yang akan dicaching\nconst assetsToCache = [\n  './',\n  './icons/icon-72x72.png',\n  './icons/icon-96x96.png',\n  './icons/icon-128x128.png',\n  './icons/icon-144x144.png',\n  './icons/icon-152x152.png',\n  './icons/icon-192x192.png',\n  './icons/icon-384x384.png',\n  './icons/icon-512x512.png',\n  './index.html',\n  './favicon.png',\n  './app.bundle.js',\n  './app.webmanifest',\n  './sw.bundle.js',\n];\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(CacheHelper.cachingAppShell([...assetsToCache]));\n});\n\nself.addEventListener('activate', (event) => {\n  event.waitUntil(CacheHelper.deleteOldCache());\n});\n\nself.addEventListener('fetch', (event) => {\n  event.respondWith(CacheHelper.revalidateCache(event.request));\n});","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n"],"names":["runtime","exports","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","done","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","_","e","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","_regeneratorRuntime","t","r","n","o","a","c","u","h","l","f","s","y","p","d","v","g","_typeof","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","cachingAppShell","requests","_this","_callee","_context","_openCache","addAll","deleteOldCache","_callee2","_context2","caches","filter","CONFIG","map","filteredName","revalidateCache","request","_this2","_callee3","response","_context3","match","_fetchRequest","_callee4","_context4","open","_this3","_callee5","_context5","fetch","status","_addCache","_this4","_callee6","_context6","add","errorCode","details","super","code","args","msg","JSON","stringify","messageGenerator","_cacheNameDetails","googleAnalytics","precache","prefix","suffix","registration","scope","_createCacheName","cacheName","join","userCacheName","waitUntil","event","asyncFn","returnPromise","createCacheKey","urlObject","URL","location","href","cacheKey","url","revision","cacheKeyURL","originalURL","searchParams","set","PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","originalRequest","cachedResponseWillBeUsed","cachedResponse","Request","PrecacheCacheKeyPlugin","precacheController","cacheKeyWillBeUsed","params","_precacheController","getCacheKeyForURL","headers","supportStatus","stripParams","fullURL","ignoreParams","strippedURL","param","delete","Deferred","promise","quotaErrorCallbacks","Set","toRequest","input","StrategyHandler","strategy","options","_cacheKeys","assign","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","Map","plugin","mode","FetchEvent","preloadResponse","possiblePreloadResponse","hasCallback","clone","cb","iterateCallbacks","thrownErrorMessage","message","pluginFilteredRequest","fetchResponse","fetchOptions","callback","runCallbacks","fetchAndCachePut","responseClone","cachePut","cacheMatch","matchOptions","effectiveRequest","getCacheKey","multiMatchOptions","setTimeout","String","replace","RegExp","origin","responseToCache","_ensureResponseSafeToCache","cache","hasCacheUpdateCallback","oldResponse","strippedRequestURL","keysOptions","ignoreSearch","cacheKeys","cacheMatchIgnoreParams","put","executeQuotaErrorCallbacks","newResponse","get","statefulCallback","statefulParam","doneWaiting","shift","destroy","pluginsUsed","Strategy","responseDone","handleAll","handler","_getResponse","_awaitComplete","_handle","waitUntilError","PrecacheStrategy","_fallbackToNetwork","fallbackToNetwork","copyRedirectedCacheableResponsesPlugin","_handleInstall","_handleFetch","integrityInManifest","integrity","integrityInRequest","noIntegrityConflict","_useDefaultCacheabilityPluginIfNeeded","defaultPluginIndex","cacheWillUpdatePluginCount","index","entries","defaultPrecacheCacheabilityPlugin","cacheWillUpdate","splice","redirected","modifier","clonedResponse","responseInit","Headers","statusText","modifiedResponseInit","body","testResponse","Response","canConstructResponseFromBodyStream","blob","copyResponse","PrecacheController","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","install","bind","activate","addToCacheList","_installAndActiveListenersAdded","addEventListener","urlsToWarnAbout","cacheMode","has","firstEntry","secondEntry","warningMessage","console","warn","installReportPlugin","credentials","all","currentlyCachedRequests","expectedCacheKeys","deletedURLs","getURLsToCacheKeys","getCachedURLs","getIntegrityForCacheKey","matchPrecache","createHandlerBoundToURL","normalizeHandler","Route","setCatchHandler","catchHandler","RegExpRoute","regExp","exec","Router","_routes","_defaultHandlerMap","routes","addFetchListener","responsePromise","handleRequest","respondWith","addCacheListener","data","payload","requestPromises","urlsToCache","ports","postMessage","protocol","startsWith","sameOrigin","route","findMatchingRoute","_catchHandler","catch","catchErr","matchResult","Array","isArray","setDefaultHandler","registerRoute","unregisterRoute","routeIndex","indexOf","defaultRouter","PrecacheRoute","urlsToCacheKeys","possibleURL","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","hash","urlWithoutIgnoredParams","paramName","some","test","removeIgnoredSearchParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","generateURLVariations","__WB_MANIFEST","capture","captureUrl","moduleName","funcName","addRoute","assetsToCache","CacheHelper","concat"],"sourceRoot":""}